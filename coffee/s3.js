// Generated by CoffeeScript 1.9.0
var BarChart, StackedChart, d3;

d3 = require('d3');

StackedChart = function(parent, config) {
  var bar_padding, canvas, duration, height, left_padding, margin, right_padding, update, width, xAxis, xScale, yAxis, yScale;
  if (config == null) {
    config = {};
  }
  "Generate a stacked bar chart which can enact new data at each bar.\nThis is to illustrate the growth volume of transactions\n\nData format:\n    data = {\n        [name: some_value, values: [\n            {value: some_value, color: some_color},\n            {value: some_value, color: some_color}\n        ]\n    }\nWhere it will be tracked by name for column. Values will use index to track.\nIf color is undefined, default color is used, style it with \".bar rect.old\"";
  width = config.width || 500;
  height = config.height || 500;
  margin = config.margin || {
    top: 20,
    right: 30,
    bottom: 40,
    left: 50
  };
  duration = config.duration || 300;
  bar_padding = 0.1;
  canvas = parent.append('svg').attr('class', 'chart').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
  yScale = d3.scale.linear().domain([]).range([height - 2, 0]);
  yAxis = d3.svg.axis().scale(yScale).orient('left');
  canvas.append('g').attr('class', 'y axis');
  left_padding = bar_padding;
  right_padding = bar_padding;
  xScale = d3.scale.ordinal().domain([]).rangeRoundBands([0, width], left_padding, right_padding);
  xAxis = d3.svg.axis().scale(xScale).orient('bottom');
  canvas.append('g').attr('transform', 'translate(0, ' + height + ')').attr('class', 'x axis');
  canvas.append('g').attr('class', 'canvas');
  update = function(data) {
    var bar, max_value, rect, t;
    xScale.domain(data.map(function(d) {
      return d.name;
    }));
    max_value = d3.max(data.map(function(d) {
      return d3.sum(d.values.map(function(d) {
        return d.value;
      }));
    }));
    data = data.map(function(d) {
      var ans;
      ans = {
        values: d.values.reduce(function(last, next) {
          var y0;
          y0 = (last[last.length - 1] && last[last.length - 1].y1) || 0;
          last.push({
            name: d.name,
            y0: y0,
            y1: y0 + next.value,
            color: next.color
          });
          return last;
        }, []),
        name: d.name
      };
      ans.total = ans.values[ans.values.length - 1].y1;
      return ans;
    });
    yScale.domain([
      0, d3.max(data.map(function(d) {
        return d.total;
      }))
    ]);
    t = canvas.transition().duration(duration);
    t.select('.x.axis').call(xAxis);
    t.select('.y.axis').call(yAxis);
    bar = canvas.select('.canvas').selectAll('.bar').data(data, function(d) {
      return d.name;
    });
    bar.enter().append('g');
    bar.exit().remove();
    bar.attr('class', 'bar').attr('transform', function(d) {
      return 'translate(' + xScale(d.name) + ', 0)';
    });
    rect = bar.selectAll('rect').data(function(d) {
      return d.values;
    });
    rect.exit().remove();
    rect.transition().duration(duration).attr('class', 'old').attr('width', function(d) {
      return xScale.rangeBand();
    }).attr('y', function(d) {
      return yScale(d.y1);
    }).attr('height', 0).attr('height', function(d) {
      return yScale(d.y0) - yScale(d.y1);
    }).style('fill', function(d) {
      return d.color;
    });
    return rect.enter().append('rect').attr('class', 'new').attr('width', function(d) {
      return xScale.rangeBand();
    }).attr('height', 0).attr('y', function(d) {
      return yScale(d.y0);
    });
  };
  return update;
};

BarChart = function(parent, data, config) {
  var bar_padding, canvas, duration, height, left_padding, margin, right_padding, update, width, xAxis, xScale, yAxis, yScale;
  if (config == null) {
    config = {};
  }
  "Generate a bar chart with name/value pairs\nSample usage:\n    bar_chart = BarChart(d3.select('.chart'), data)\n    bar_chart(new_data)  #  update new data\nThe chart joins data by value of key 'name'";
  width = config.width || 500;
  height = config.height || 500;
  margin = config.margin || {
    top: 20,
    right: 30,
    bottom: 40,
    left: 40
  };
  duration = config.duration || 100;
  bar_padding = 0.1;
  canvas = parent.append('svg').attr('class', 'chart').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
  yScale = d3.scale.linear().domain([
    0, d3.max(data.map(function(d) {
      return d.value;
    }))
  ]).range([height, 0]);
  yAxis = d3.svg.axis().scale(yScale).orient('left');
  canvas.append('g').attr('class', 'y axis').call(yAxis);
  left_padding = bar_padding;
  right_padding = bar_padding;
  xScale = d3.scale.ordinal().domain(data.map(function(d) {
    return d.name;
  })).rangeRoundBands([0, width], left_padding, right_padding);
  xAxis = d3.svg.axis().scale(xScale).orient('bottom');
  canvas.append('g').attr('transform', 'translate(0, ' + height + ')').attr('class', 'x axis').call(xAxis);
  canvas.append('g').attr('class', 'bar');
  update = function(data) {
    var bar, t;
    xScale.domain(data.map(function(d) {
      return d.name;
    }));
    yScale.domain([
      0, d3.max(data.map(function(d) {
        return d.value;
      }))
    ]);
    t = canvas.transition().duration(duration);
    t.select('.x.axis').call(xAxis);
    t.select('.y.axis').call(yAxis);
    bar = canvas.select('.bar').selectAll('.rect').data(data, function(d) {
      return d.name;
    });
    bar.enter().append('rect').attr('class', 'rect');
    bar.transition().attr('x', function(d) {
      return xScale(d.name);
    }).attr('y', function(d) {
      return yScale(d.value);
    }).attr('width', function(d) {
      return xScale.rangeBand();
    }).attr('height', function(d) {
      return height - yScale(d.value);
    });
    return bar.exit().remove();
  };
  update(data);
  return update;
};

module.exports.StackedChart = StackedChart;
